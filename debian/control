Source: android-platform-tools-apksig
Section: java
Priority: optional
Maintainer: Android Tools Maintainers <android-tools-devel@lists.alioth.debian.org>
Uploaders: Hans-Christoph Steiner <hans@eds.org>
Build-Depends: antlr3,
               bash-completion,
               debhelper (>= 10),
               default-jdk-headless | default-jdk (>= 1:1.6),
               gradle-debian-helper,
               groovy,
               javahelper,
               junit4,
               maven-debian-helper,
               maven-repo-helper,
               pandoc,
               proguard-cli
Standards-Version: 3.9.8
Vcs-Browser: https://anonscm.debian.org/cgit/android-tools/android-platform-tools-apksig.git
Vcs-Git: https://anonscm.debian.org/git/android-tools/android-platform-tools-apksig.git
Homepage: https://android.googlesource.com/platform/tools/apksig

Package: libapksig-java
Architecture: all
Depends: ${misc:Depends}
Description: library to sign and verify Android APKs
 apksig is a project which aims to simplify APK signing and checking
 whether APK's signatures should verify on Android. apksig supports
 JAR signing (used by Android since day one) and APK Signature Scheme
 v2 (supported since Android Nougat, API Level 24).
 .
 The key feature of apksig is that it knows about differences in APK
 signature verification logic between different versions of the
 Android platform. apksig can thus check whether a signed APK is
 expected to verify on all Android platform versions supported by the
 APK. When signing an APK, apksig will choose the most appropriate
 cryptographic algorithms based on the Android platform versions
 supported by the APK being signed.
 .
 apksig library offers three primitives:
 .
  * ApkSigner which signs the provided APK so that it verifies on all
 Android platform versions supported by the APK. The range of platform
 versions can be customized if necessary.
 .
  * ApkVerifier which checks whether the provided APK is expected to
 verify on all Android platform versions supported by the APK. The
 range of platform versions can be customized if necessary.
 .
  * (Default)ApkSignerEngine which abstracts away signing an APK from
 parsing and building an APK file. This is useful in optimized APK
 building pipelines, such as in Android Plugin for Gradle, which need
 to perform signing while building an APK, instead of after. For
 simpler use cases where the APK to be signed is available upfront,
 the ApkSigner above is easier to use.
 .
 NOTE: Some public classes of the library are in packages having the
 word “internal” in their name. These are not public API of the
 library. Do not use *.internal.* classes directly.

Package: apksigner
Architecture: all
Depends: ${misc:Depends},
         jarwrapper,
         default-jre-headless (>= 1:1.6) | java6-runtime-headless
Description: command line tool to sign and verify Android APKs
 apksig is a project which aims to simplify APK signing and checking
 whether APK's signatures should verify on Android. apksig supports
 JAR signing (used by Android since day one) and APK Signature Scheme
 v2 (supported since Android Nougat, API Level 24).
 .
 The key feature of apksig is that it knows about differences in APK
 signature verification logic between different versions of the
 Android platform. apksig can thus check whether a signed APK is
 expected to verify on all Android platform versions supported by the
 APK. When signing an APK, apksig will choose the most appropriate
 cryptographic algorithms based on the Android platform versions
 supported by the APK being signed.
 .
 apksigner command-line tool offers two operations:
 .
  * sign the provided APK so that it verifies on all Android platforms
 supported by the APK. Run apksigner sign for usage information.
 .
  * check whether the provided APK's signatures are expected to verify
 on all Android platforms supported by the APK. Run apksigner verify
 for usage information.
 .
 The tool determines the range of Android platform versions (API
 Levels) supported by the APK by inspecting the APK's
 AndroidManifest.xml. This behavior can be overridden by specifying
 the range of platform versions on the command-line.
